# Elasticsearch增、删、改、查基础操作

## 索引操作

### 创建索引

![](../../../assets/images/2021-01-31-18-36-00.png)

### 删除索引

![](../../../assets/images/2021-01-31-23-02-20.png)

## 基本curd

### 插入数据

![](../../../assets/images/2021-01-31-22-43-17.png)

### 修改文档

![](../../../assets/images/2021-01-31-22-57-38.png)

### 查询文档

![](../../../assets/images/2021-01-31-22-56-13.png)

### 删除文档

![](../../../assets/images/2021-01-31-22-59-57.png)

### 批量增改删-_bulk

#### 1.1 bulk的基础概念

-------------

`bulk` 是 `es` 提供的一种 `批量增删改` 的操作API。

#### 1.2 bulk的语法

`bulk` 对 `JSON串` 的有着严格的要求。每个JSON串 `不能换行` ，只能放在同一行，同时， `相邻的JSON串之间必须要有换行` （Linux下是\n；Window下是\r\n）。bulk的每个操作必须要 `一对JSON串` （delete语法除外）。

``` 

`{ action: { metadata }}
{ request body        }
{ action: { metadata }}
{ request body        }`
```

例如，加入现在要给 `example` 的 `docs` 中新增一个文档。其表示如下：

``` 

`POST _bulk
{"create": {"_index": "myindex", "_id": 11}}
{"name": "test_bulk", "counter":"100"}

#查询myindex所有数据,发现id为11的已经添加成功
GET myindex/_search
{
  "query": {
    "match_all": {}
  }
}`
```

#### 1.3 bulk的操作类型

* `create` 如果文档不存在就创建，但如果文档存在就返回错误
* `index` 如果文档不存在就创建，如果文档存在就更新
* `update` 更新一个文档，如果文档不存在就返回错误
* `delete` 删除一个文档，如果要删除的文档id不存在，就返回错误

其实可以看得出来 `index` 是比较常用的。还有bulk的操作，**某一个操作失败，是不会影响其他文档的操作的，它会在返回结果中告诉你失败的详细的原因。**

#### 二、bulk常用示例

#### 批量插入

``` 

POST myindex/_bulk
{"index": {"_id": 1}}
{"id":1, "name": "admin", "counter":"10", "tags":["red", "black"]}
{"index": {"_id": 2}}
{"id":2, "name": "张三", "counter":"20", "tags":["green", "purple"]}
{"index": {"_id": 3}}
{"id":3, "name": "李四", "counter":"30", "tags":["red", "blue"]}
{"index": {"_id": 4}}
{"id":4, "name": "tom", "counter":"40", "tags":["orange"]}
```

#### 批量修改

``` 

POST myindex/_bulk
{"update": {"_id": 1}}
{"doc": {"id":1, "name": "admin-02", "counter":"11"}}
{"update": {"_id": 2}}
{"script":{"lang":"painless","source":"ctx._source.counter += params.num","params": {"num":2}}}
{"update":{"_id": 3}}
{"doc": {"name": "test3333name", "counter": 999}}
{"update":{"_id": 4}}
{"doc": {"name": "test444name", "counter": 888},  "doc_as_upsert" : true}
```

#### 批量删除

``` 

POST myindex/_bulk
{"delete": {"_id": 1}}
{"delete": {"_id": 2}}
{"delete": {"_id": 3}}
{"delete": {"_id": 4}}
```

#### 批量的混合操作

``` 

POST _bulk
{ "index" : { "_index" : "myindex", "_id" : "1" } }
{ "name" : "value11111" }
{ "delete" : { "_index" : "myindex",  "_id" : "2" } }
{ "create" : { "_index" : "myindex", "_id" : "3" } }
{ "tags" : "value333" }
{ "update" : {"_id" : "4", "_index" : "myindex"} }
{ "doc" : {"name" : "混合444"} }
```

### 批量读取-mget

``` 

// 创建测试数据
POST myindex/_bulk
{"index":{"_index":"myindex","_id":"1"}}
{"name":"colin1"}
{"index":{"_index":"myindex","_id":"2"}}
{"name":"colin2"}

// 批量读取
GET _mget
{
  "docs":[
    {
      "_index":"myindex",
      "_id":1
    },
    {
      "_index":"myindex",
      "_id":2
    }
  ]
}
```

### 批量查询-msearch

``` 

## 添加测试数据

POST _bulk
{"index":{"_index":"myindex","_id":"1"}}
{"name":"colin1"}
{"index":{"_index":"myindex","_id":"2"}}
{"name":"colin2"}

POST _bulk
{"index":{"_index":"myindex2","_id":"1"}}
{"name":"colin3"}
{"index":{"_index":"myindex2","_id":"2"}}
{"name":"colin4"}

## 批量查询

POST myindex/_msearch
{}
{"query":{"match_all":{}},"from":0,"size":1}
{"index":"myindex2"}
{"query":{"match_all":{}}}
```
