{"remainingRequest":"/var/www/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/node_modules/cache-loader/dist/cjs.js??ref--1-0!/var/www/node_modules/vue-loader/lib/index.js??ref--1-1!/var/www/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/var/www/src/系统组件与架构设计/K8S/23kubernetes 高可用集群搭建.md?vue&type=template&id=65385f9c&","dependencies":[{"path":"/var/www/src/系统组件与架构设计/K8S/23kubernetes 高可用集群搭建.md","mtime":1620987523183},{"path":"/var/www/node_modules/cache-loader/dist/cjs.js","mtime":1620892112368},{"path":"/var/www/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1620892112813},{"path":"/var/www/node_modules/cache-loader/dist/cjs.js","mtime":1620892112368},{"path":"/var/www/node_modules/vue-loader/lib/index.js","mtime":1620892112813},{"path":"/var/www/node_modules/@vuepress/markdown-loader/index.js","mtime":1620892110587}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}