{"remainingRequest":"/var/www/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/node_modules/cache-loader/dist/cjs.js??ref--1-0!/var/www/node_modules/vue-loader/lib/index.js??ref--1-1!/var/www/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/var/www/src/消息队列/Kafka/7扩展.md?vue&type=template&id=927c950c&","dependencies":[{"path":"/var/www/src/消息队列/Kafka/7扩展.md","mtime":1621092725913},{"path":"/var/www/node_modules/cache-loader/dist/cjs.js","mtime":1620892112368},{"path":"/var/www/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1620892112813},{"path":"/var/www/node_modules/cache-loader/dist/cjs.js","mtime":1620892112368},{"path":"/var/www/node_modules/vue-loader/lib/index.js","mtime":1620892112813},{"path":"/var/www/node_modules/@vuepress/markdown-loader/index.js","mtime":1620892110587}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}