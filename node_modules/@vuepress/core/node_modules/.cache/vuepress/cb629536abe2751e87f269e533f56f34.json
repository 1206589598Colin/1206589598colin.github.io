{"remainingRequest":"/var/www/node_modules/vue-loader/lib/index.js??ref--1-1!/var/www/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/var/www/src/开发基础/面向对象需求分析与UML建模/Mermaid实战.md?vue&type=custom&index=0&blockType=data","dependencies":[{"path":"/var/www/src/开发基础/面向对象需求分析与UML建模/Mermaid实战.md","mtime":1615731629796},{"path":"/var/www/node_modules/@vuepress/core/lib/node/internal-plugins/dataBlock/loader.js","mtime":1620892107818},{"path":"/var/www/node_modules/cache-loader/dist/cjs.js","mtime":1620892112368},{"path":"/var/www/node_modules/vue-loader/lib/index.js","mtime":1620892112813},{"path":"/var/www/node_modules/@vuepress/markdown-loader/index.js","mtime":1620892110587}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}